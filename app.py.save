#import Flask
from flask import *
import os
import glob
import pandas as pd
import json
import plotly
import plotly.express as px
import re
import tellurium as te
import matplotlib.pyplot as plt
#import StringIO
import base64
from io import StringIO
#from crn2tellurium_module import *
import numpy as np
import base64
from io import BytesIO
from matplotlib.figure import Figure
#create an instance of Flask
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
import io
app = Flask(__name__, template_folder='templates')
class DataStore():
    specs = None

data = DataStore()

def random():
     session['number'] = randint(0,2)
     return None

@app.route('/')
def home():
    return render_template("home.html")

@app.route('/input_user')
def input_user():
    files = os.listdir('templates/metode_lucru/')
    temp=[]
    for file in files:
        temp.append({'name':file})
    specs1=session.get("specs")

    return render_template("input_user.html", data=temp, specs1=specs1)

@app.route('/input_user', methods=['GET', 'POST'])
def input_user_post():
    global select, text, text1, text3, text4, specs, text5, text6, text8, text9
    text = request.form['durata']
    session['text'] = text
    processed_text = text.upper()

    text1 = request.form['amplitudine']
    session['text1'] = text1
    processed_text1 = text1.upper()



    text3 = request.form['valinit']
    session['text3'] = text3
    processed_text3 = text3.upper()

    text5 = request.form['valinit2']
    session['text5'] = text5
    processed_text5 = text5.upper()

    text6 = request.form['valinit3']
    session['text6'] = text6
    processed_text6 = text6.upper()

    text4 = request.form['valk']
    session['text4'] = text4
    processed_text4 = text4.upper()

    text8 = request.form['valk2']
    session['text8'] = text8
    processed_text8 = text8.upper()

    text9 = request.form['valk4']
    session['text9'] = text9
    processed_text9 = text9.upper()


    select = request.form.get('comp_select')
    session['select'] = select
    specs1=session.get("specs")
    print(specs1)
    print(select)
    print(text)
    print (text3)
#    return(str(select), text) # just to see what select is
    return redirect(f"/graph2")
@app.route('/graph2')
def plot_png():
    fig = create_figure()
    output = io.BytesIO()
#    FigureCanvas(fig).print_png(output)
#    return Response(output.getvalue(), mimetype='image/png')
    return render_template("graph.html")
def create_figure():
    global select
    session['select']=select
    filename = 'templates/metode_lucru/'+select
    tel = crn2antimony(filename)
    #print(select)
    print(text)
    print("ceva")
    session['text'] = text
    session['text1'] = text1
    session['text3'] = text3
    session['text4'] = text4
    session['text5'] = text5
    session['text6'] = text6
    session['text8'] = text8
    session['text9'] = text9




    print(text)
    print(select)
    print(text3)

#teltest =' -> A; k1\n2 A + 3 B -> 4 C; k2*A*A*B*B*B\n4 C -> 2 A + 3 B; k3*C*C*C*C\n2 B -> C + 3 A; k4*B*B\n2 B -> C; k5*B*B\nC -> 2 B; k6*C\nC -> ; k7*C\n\nk1 = 7;\nk2 = 7;\nk3 = 7;\nk4 = 7;\nk5 = 7;\nk6 = 7;\nk7 = 7;\n\n\nA = 1;\nB = 1;\nC = 1;\n'
#simu = te.loada(teltest)

    simu = te.loada(tel)
    simu.simulate(int(text1), int(text), 50)
#    array=simu.simulate(0, 500, 100)
    simu.plot()
    simu.show()
    from matplotlib import pyplot as simu
    simu.savefig('static/grafic.png')
#    return render_template('user_input.html', data=temp)
#    return fig
    return render_template("home.html")

def crn2antimony(filename):

    ## filename = 'crn_a_b_c.txt'
#    filename = 'crn.txt'
    f = open(filename, 'rt')
    a = f.readlines()
    #print(a)

    b = list( map(lambda x:x.strip(), a) )  # scapa de un <enter> la sfarsit
    #print(b)



    # ---- inlocuirea sagetilor -----
    r = [];
    for x in b:
        loc = x.find('<-->')
        if  loc > -1:    # reactie bidirectionala
            r.append( x.replace('<-->', '->') )  # reactia directa
            r.append( x[loc+4:len(x)].strip() + ' -> ' + x[0:loc].strip() )  # reactia inversa
        else:
            loco = x.find('<--')
            if loco > -1:
                r.append( x[loco+4:len(x)].strip() + ' -> ' + x[0:loco].strip() )  # reactia inversa
            else:
                r.append( x.replace('-->', '->') )  # reactia este simpla, doar de la stanga la dreapta
    #print( r )

    s = list( map(lambda x:x.replace(" ", ""), r) )


    kcont = 1   # cate reactii sunt
    krates = []   # lista cu vitezele de reactie
    for x in s:   # gaseste vitezele de reactie
        kcont = kcont + 1;  # de la 1 la cate reactii sunt
        krate = ''   # rata de reactie
        krate = krate + 'k' + str(kcont)

        le = x.split('->')[0]
        ats = le.split('+')
        if ats == ['0']:  # zero barat in stanga
            pass
        else:
            for ato in ats:
                coef = re.findall(r'^[0-9]*', ato)[0]   # este sir vid '' daca nu gaseste
                spec = re.findall(r'[a-zA-Z]+.*', ato)[0]

                if coef == '':
                    cnt = 1
                else:
                    cnt = int(coef)

                for i in range(cnt):
                    krate = krate + '*' + spec   # adauga *A*A*A de cata ori era, ex.A3
        krates.append( krate )
    ## end -- for x in s

    global specs
    specs = []
    for x in s:   # gaseste speciile
        ats = x.replace('->', '+').split('+')

        for ato in ats:
            if ato == '0':  # zero barat in stanga
                pass
            else:
                spec = re.findall(r'[a-zA-Z]+.*', ato)[0]
                specs.append( spec )  # in place
    ## end -- for x in s
    specs = list(set(specs))
    specs.sort()  # alfabetic, in place
    session["specs"]=specs
    #print( krates )
    print( specs )



    # pune spatii intre coeficienti si specii
    reacts = []   # lista cu reactiile
    for x in s:

        le = x.split('->')[0]  # reactantii
        ri = x.split('->')[1]  # produsii
        atsle = le.split('+')  # 2A3
        atsri = ri.split('+')

        react = ''

        lle = []
        if atsle == ['0']:  # zero barat in stanga
            pass
        else:
            for ato in atsle:
                coef = re.findall(r'^[0-9]*', ato)[0]   # este sir vid '' daca nu gaseste
                spec = re.findall(r'[a-zA-Z]+.*', ato)[0]
                lle.append( coef + ' ' + spec )

        react = react + ' + '.join( lle )
        react = react + ' -> '

        lri = []
        if atsri == ['0']:  # zero barat in stanga
            pass
        else:
            for ato in atsri:
                coef = re.findall(r'^[0-9]*', ato)[0]   # este sir vid '' daca nu gaseste
                spec = re.findall(r'[a-zA-Z]+.*', ato)[0]
                lri.append( coef + ' ' + spec )

        react = react + ' + '.join( lri )

        reacts.append( react )
    ## end --- for x in x

    reacts = list( map(lambda x:x.replace("  ", " "), reacts) )    # elimina spatiile duble
    reacts = list( map(lambda x:x.strip(), reacts) )   # elimina spatiile de la inceput si sfarsit

    #for x in reacts:
    #    print( x )


    ## --- creaza stringul de Tellurium

    tel = ''
    ii = -1;
    for x in reacts:
        ii = ii + 1;
        tel = tel + x + '; ' + krates[ii] + '\n'


    tel = tel + '\n'

    session['text4'] = text4
    session['text8'] = text8
    session['text9'] = text9

    #valk=str(text9)
    valk = [str(text4), str(text8), 1,1,1]   # valoarea pentru constantele de reactie
    #valk=1
    for k in range(0,kcont):
        tel = tel + 'k' + str(k+1) + ' = ' + str( valk[k]) + ';\n'
##

    tel = tel + '\n'
    print('acumaa')
    print(kcont)
    print(tel)
    session['text3'] = text3
    session['text5'] = text5
    session['text6'] = text6

    print (text3)
    #valinit = str(text3)  # valoarea pentru conditiile initiale
    valinit=[str(text3), str(text5), str(text6)]
    for i in range(0,len(specs)):
        tel = tel + specs[i] + ' = ' + str( valinit[i] ) + ';\n'

    tel = tel + '\n'
###

    print(tel)
    specs1=session.get("specs")
    print(specs1)
    return tel


## --- end crn2antimony() ----------------------------------------------------


if __name__ == "__main__":
    print("This module is not to be run form the __main__ scope")





@app.route('/dateuser')
def form():
    return render_template('form.html')

@app.route('/data/', methods = ['POST', 'GET'])
def data():
    if request.method == 'GET':
        return f"The URL /data is accessed directly. Try going to '/form' to submit form"
    if request.method == 'POST':
        form_data = request.form
        return render_template('data.html',form_data = form_data)



if __name__ == '__main__':
    app.secret_key="ceva"
    app.run(host="192.168.1.", port ='5000', debug=True)
